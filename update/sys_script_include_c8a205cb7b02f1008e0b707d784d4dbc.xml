<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_xma_xmatters.xMattersLogger</api_name>
        <client_callable>false</client_callable>
        <description>This include is designed to manage the logging of messages for xMatters integration processes.</description>
        <name>xMattersLogger</name>
        <script><![CDATA[var xMattersLogger = Class.create();

xMattersLogger.prototype = {
  
  initialize : function(logLevel, source ) {
    
    this.logLevel = "WARN";
    this.type = 'xMattersLogger';
    this.source = (source == null ? '' : source + ' ' );
    
    this.count = 0;
    this.numZeros = 4;
    
    logLevel = (logLevel == null ? 'WARN' : logLevel );
    
    if (logLevel.toUpperCase() == "ERROR") {
      this.logLevel = 3;
    }
    else if (logLevel.toUpperCase() == "INFO") {
      this.logLevel = 1;
    }
    else if (logLevel.toUpperCase() == "DEBUG") {
      this.logLevel = 0;
    }
    else {
      this.logLevel = 2;  // Default is WARN
    }
  },

  isDebug : function() { 
    return this.logLevel <= 0; 
  },

  debug : function(s) {
    if (this.isDebug()){
      this.count++;
      
      // It often happens that we write multiple
      // lines to the log in one second, which 
      // means they are not sorted in the system
      // logs. So, here we add a number (i.e. 002) 
      // to each line so you can sort on the log. 
      s = 'DEBUG: ' + this.paddy( this.count, this.numZeros ) + ' ' + s;
      gs.info( this.source + s );
    }
  },
  
  info : function(s) {
    if (this.logLevel <= 1){
      gs.info( this.source + s );
    }
  },
  
  warn : function(s) {
    if (this.logLevel <= 2){
      gs.warn( this.source + s );
    }
  },
  
  error : function(s) {
    if (this.logLevel <= 3){
      gs.error( this.source + s );
    }
  },
  paddy : function (n, p, c) {
    var pad_char = typeof c !== 'undefined' ? c : '0';
    var pad = new Array(1 + p).join(pad_char);
    return (pad + n).slice(-pad.length);
  }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2015-02-09 19:56:39</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>c8a205cb7b02f1008e0b707d784d4dbc</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>xMattersLogger</sys_name>
        <sys_package display_value="Global" source="global">global</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_script_include_c8a205cb7b02f1008e0b707d784d4dbc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2015-09-24 18:53:43</sys_updated_on>
    </sys_script_include>
</record_update>
