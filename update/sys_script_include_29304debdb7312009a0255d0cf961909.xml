<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_xma_xmatters.xMattersPersonCollection</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>xMattersPersonCollection</name>
        <script><![CDATA[gs.include('xMattersDataHelper');
gs.include('xMattersPerson');

/**
 * xMattersPersonCollection model for managing multiple users
 *
 * @type {Object}
 */
var xMattersPersonCollection = Class.create();

xMattersPersonCollection.prototype = {

    /**
     * Initialize the xMattersPerson object
     */
    initialize: function (dataHelper) {
        this.MAX_CALLS_PER_USER = 7;
        this.MAX_CALLS_PER_PROCESS = 100;

        this.log = new xMattersLogger(gs.getProperty("x_xma_xmatters.xmatters.logging.level"),
            'xMattersPersonCollection');

		if (dataHelper && dataHelper.type == 'xMattersDataHelper') {
			this.log.debug('xMattersPersonCollection::initialize using passed in dataHelper');
			this.dataHelper = dataHelper;
		} else {
			this.log.debug('xMattersPersonCollection::initialize creating own dataHelper');
			this.dataHelper = new xMattersDataHelper();
		}

		this.person = new xMattersPerson(this.dataHelper);
    },

    /**
     * Insert/Update users in xMatters asynchronously (in the background)
     *
     * @param {[]} users an array of sys_user records or usernames of the users to sync
     * @returns {*}
     */
    syncUsersAsync: function (users) {
        var worker = new GlideScriptedHierarchicalWorker();
        worker.setProgressName("x_xma_xmatters.xMattersPersonCollection syncUsers: " + users);

        worker.setBackground(true);
        worker.setScriptIncludeName("x_xma_xmatters.xMattersPersonCollection");
        worker.setScriptIncludeMethod("syncUsers");
        worker.putMethodArg("users", users);
        worker.start();

        return worker.getProgressID();
    },
    
    syncUsers: function (users) {
        var start = new Date();
        var logId1 = start.getTime(),
            logId2 = 0;
        

        this.log.warn("Worker loading " + users.length + " users " +
            (this.log.isDebug() ? users : "") + " started at " + start, logId1, logId2++);

        var userRec = new GlideRecord("sys_user");
        userRec.addEncodedQuery('user_nameIN' + users.join());
        userRec.orderBy('user_name');
        userRec.query();

        var userCount = 0, syncedUsers = [];
        while (userRec.next()) {
            this.log.debug("Loading user " + userRec.user_name + "...", logId1, logId2++);

			if (!this.person.syncUser(userRec)) {
                this.log.error("User Sync has finished on REST error response. REST calls: " +
							   this.dataHelper.getCallCount(), logId1, logId2++);
				break;
			}

            userCount++;
            if (this.log.isDebug()) {
				syncedUsers.push(userRec.user_name.toString());
			}

            if (this.MAX_CALLS_PER_PROCESS - this.dataHelper.getCallCount() < this.MAX_CALLS_PER_USER) {
                // do the rest of the work in a different process
                var moreUsersToSync = [];
                while (userRec.next()) {
                    moreUsersToSync.push(userRec.user_name.toString());
                }

                if (moreUsersToSync.length > 0) {
                    if (this.log.isDebug()) {
                        this.log.warn('Worker is close to REST calls quota and will sync ' +
                            moreUsersToSync.length + ' users: ' + moreUsersToSync + ' in a separate process',
                            logId1, logId2++);
                    }
                    this.syncUsersAsync(moreUsersToSync);
                }
                break;
            }
        }

        this.log.warn("Worker completed syncing " + userCount + " of " + users.length + " users " +
					  (this.log.isDebug() ? syncedUsers : "") + " at " + (new Date()) + ". Time elapsed: " +
					  (new Date().getTime() - start.getTime()) + " ms. REST calls: " +
					  this.dataHelper.getCallCount(), logId1, logId2++);
    },
	
	/**
     * Get the "syncable" users for a batch sync
     *
     * Only those uses that have a role listed in xmatters.user.sync.roles.list are
     * eligible for sync. Roles can be directly attributed to the user or inherited
     * through group membership
     *
     * @returns {Array}
     */
    getSyncableUsers: function () {
        var arrayUtil = new global.ArrayUtil();

        var syncableUsers = [];
        var roleFilterList = gs.getProperty("x_xma_xmatters.xmatters.user.sync.roles.list");
        if (roleFilterList.trim().length > 0) {
            var roles = roleFilterList.split(";");
            for (var j = 0; j < roles.length; j++) {
                roles[j] = roles[j].trim();
            }

            var grUserRoles = new GlideRecord('sys_user_has_role');
            grUserRoles.addQuery('user.active', 'true');
            grUserRoles.addQuery('role.name', 'IN', roles.join());

            // exclude the API user from sync
            grUserRoles.addQuery('user.user_name', '!=', gs.getProperty('x_xma_xmatters.xmatters.api.user'));

            grUserRoles.orderBy('user.user_name');
            grUserRoles.query();
            while (grUserRoles.next()) {
                if (!arrayUtil.contains(syncableUsers, grUserRoles.user.user_name.toString())) {
                    syncableUsers.push(grUserRoles.user.user_name.toString());
                }
            }

            syncableUsers = arrayUtil.unique(syncableUsers);
        }

        this.log.debug("*** " + syncableUsers.length + " users matched: " + syncableUsers.join());

        return syncableUsers;
    },

    type: 'xMattersPersonCollection'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-06-10 01:16:12</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>29304debdb7312009a0255d0cf961909</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>xMattersPersonCollection</sys_name>
        <sys_package display_value="xMatters" source="x_xma_xmatters">5950d7444f2231000e9fa88ca310c78c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_script_include_29304debdb7312009a0255d0cf961909</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-06-10 16:04:24</sys_updated_on>
    </sys_script_include>
</record_update>
