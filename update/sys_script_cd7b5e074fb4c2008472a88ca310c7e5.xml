<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>incident</collection>
        <condition/>
        <description/>
        <execute_function>true</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>xMatters incident events update</name>
        <order>10000</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[function onBefore(current, previous) { 
  
  //This function will be automatically called when this rule is processed.
  gs.include("xMattersIncident");
  gs.include("xMattersLogger");
  gs.include("xMattersRESTHelper");
  
  var appPrefix = gs.getCurrentScopeName(); 
  var log = new xMattersLogger(gs.getProperty(appPrefix + '.' + "xmatters.logging.level"));
  var restHelper = new xMattersRESTHelper();
  var json = new global.JSON();
  var parms = null;
  
  var eventName = 'x_xma_xmatters.incident.action';
  
  // Inject incidents based off the Incident priority field found in the xMatters system properties
  var priorities = gs.getProperty(appPrefix + '.' + "xmatters.incident.priority");
  if ( !gs.nil( priorities ) && priorities.indexOf( current.priority ) >= 0 ) {
    var activeIncident = current.incident_state != 6 && current.incident_state != 7;
    
    // If it is still an active Incident...
    if ( activeIncident ) {
      
      // Check if the priority changed...
      if (current.priority.changes() && current.priority < previous.priority) { 
        
        parms = {
          "terminate": true,
          "sendEvent": true,
          "triggerRule": "Priority Upgrade",
          "userName": gs.getUserName()
        };
      // Or if it was Reopened  
      } else if (previous.incident_state == 6 || previous.incident_state == 7) {
        
        parms = {
          "terminate": true,
          "sendEvent": true,
          "triggerRule": "Reopened",
          "userName": gs.getUserName()
        };
      // Or if the SLA Alert fired  
      } else if (current.escalation.changes() &&
        current.escalation > previous.escalation && previous.escalation != -1) {
        
        parms = {
          "terminate": true,
          "sendEvent": true,
          "triggerRule": "SLA Alert",
          "userName": gs.getUserName()
        };
      // Of if the assigned to changes  
      } else if (!current.assigned_to.nil() && current.assigned_to.changes()) {
        
        parms = {
          "terminate": true,
          "sendEvent": true,
          "triggerRule": "Assignment",
          "userName": gs.getUserName()
        };
      // Or if the assignment group changes 
      } else if (!current.assignment_group.nil() && (current.assignment_group.changes() || current.assigned_to.changes())) {
        
        parms = {
          "terminate": true,
          "sendEvent": true,
          "triggerRule": "Assignment",
          "userName": gs.getUserName()
        };
      // Otherwise, it is an update we don't care about
      } else {
        // Do not fire
        parms = null;
      }
      // End if active incident      
    } else {
      // Check to see if we should terminate the events
      if (current.incident_state.getDisplayValue() == "Resolved" &&
        previous.incident_state.getDisplayValue() != "Resolved") {
          
        parms = {
          "terminate": true,
          "sendEvent": false,
          "triggerRule": "Delete",
          "userName": gs.getUserName()
        };
      } else if (current.incident_state.getDisplayValue() == "Closed" &&
        previous.incident_state.getDisplayValue() != "Closed") {
          
        parms = {
          "terminate": true,
          "sendEvent": false,
          "triggerRule": "Delete",
          "userName": gs.getUserName()
        };
      }
      // Do not fire
      else {
        parms = null;
      }
    }
  // Check to see if the priority was downgraded. If so, we terminate the events in xM
  } else if ( !gs.nil( priorities ) &&
  current.priority != previous.priority && priorities.indexOf(previous.priority) >= 0) {
    
    parms = {
      "terminate": true,
      "sendEvent": false,
      "triggerRule": "Delete",
      "userName": gs.getUserName()
    };
  }
  
  if( parms != null ) {
    log.debug("Queuing event from incident update business rule, parms: " + json.encode( parms ) );
    gs.eventQueue( restHelper.getEventName( current.number, eventName ), current, json.encode( parms ), 'incidentUpdate');
  }
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2015-06-26 19:17:55</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>cd7b5e074fb4c2008472a88ca310c7e5</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>xMatters incident events update</sys_name>
        <sys_overrides/>
        <sys_package display_value="xMatters" source="x_xma_xmatters">5950d7444f2231000e9fa88ca310c78c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_script_cd7b5e074fb4c2008472a88ca310c7e5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-01-20 18:37:05</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=cd7b5e074fb4c2008472a88ca310c7e5"/>
</record_update>
