<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_processor">
    <sys_processor action="INSERT_OR_UPDATE">
        <active>true</active>
        <class_name/>
        <description>xMatters inbound REST based requests from Task notifications</description>
        <interactive>false</interactive>
        <name>xMattersTaskRESTProcessor</name>
        <parameters/>
        <params_endpoint/>
        <path>xMattersTaskRESTProcessor</path>
        <path_endpoint>x_xma_xmatters_xMattersTaskRESTProcessor</path_endpoint>
        <require_csrf>false</require_csrf>
        <roles/>
        <script><![CDATA[gs.include("xMattersLogger");

var appPrefix = gs.getCurrentScopeName();
var log = new xMattersLogger( gs.getProperty( appPrefix + '.' + "xmatters.logging.level"), 'xMattersTaskRESTProcessor' );

/*
 * Get the inbound REST 'mode'
 * The mode determines what type of rest callback we are dealing with
 */
try {
  
  //var urlParamList = g_request.getParameterNames();
  var inboundMode = "";
  var errorMessage = "";

  var inboundMode = g_request.getParameter( 'mode' );
  log.debug( 'inboundMode: ' + inboundMode );

  /*
  * Use ServiceNow libraries to covert the JSON string to an object
  */
  var parser = new global.JSON();
  var response = buildResponse( g_request.getParameterNames() );
  log.debug( 'response: ' + parser.encode( response ) );
  
  
  // Get the task id
  var eventProperties = response.eventProperties;
  var task_sys_id = "";
  
  for(var key in eventProperties) {
    if (eventProperties[key].task_sys_id != null)
      task_sys_id = eventProperties[key].task_sys_id;
  }
  
  
  if (task_sys_id == "" || task_sys_id == null) {
    this.log.error("xMattersTaskRESTProcessor: ERROR the inbound REST callback did not contain the task_sys_id");
    errorMessage = '{\n' +
    'type":"TASK_ID_NOT_FOUND",\n' +
    'message": "xMattersTaskRESTProcessor the inbound REST callback did not contain the task_sys_id"\n' +
    '}';
  } else {
    log.debug("Recieved inbound " + inboundMode + " REST callback with xM with task_sys_id " + task_sys_id);
    
    // Initialize the temporary table and the
    // u_.... transform map will take care
    // of the update
    var taskRec = new GlideRecord( appPrefix + '_' + 'xm_task_temp');
    taskRec.initialize();
    taskRec.task_sys_id = task_sys_id;
    
    /*
    * Process the inbound mode to deterine how to handle the REST callback.
    */
    if (inboundMode == "status") {
      
      taskRec.task_work_notes = "[xMatters] - xM event ID " + response.eventIdentifier + " has an updated status of " + response.status + " date " + response.date + "";
      
      // update the task
      taskRec.update();
    } else if (inboundMode == "deliveryStatus") {
      
      taskRec.task_work_notes = "[xMatters] - xM event ID " + response.eventIdentifier + " has a delivery status of " + response.deliveryStatus + " for recipient " + response.recipient + "(" + response.device + ") at " + response.date;
      
      // update the task
      taskRec.update();
    } else if (inboundMode == "response") {

      // Handle the different types of responses
      // If the response is not in this list, it will simply be logged in the worknotes
      // and the state will not be updated. 
      var stateResponses = ["Accept"];
      
      log.debug( 'Response: "' + response.response );

      var notes = "[xMatters] - Received Response " + response.response;
      
      if ( !gs.nil( response.annotation ) && response.annotation != 'null' ) {
        notes += " - '" + response.annotation + "'"; 
      }
      
      notes += " by " + response.recipient + "(" + response.device + ") at " + response.date + "";
      
      taskRec.task_work_notes = notes;
      
      // update the task
      taskRec.update();
      
    } else {
      log.error("xMattersTaskRESTProcessor: ERROR the inbound REST callback 'mode' did not match expected values");
      errorMessage = '{\n' +
      'type":"MODE_DID_NOT_MATCH_EXPECTED_VALUE",\n' +
      'message": "xMattersTaskRESTProcessor the inbound REST callback mode did not match expected values"\n' +
      '}';
    }
  }
  
  /*
  * If we want to send information back to the client, we can
  * do so through the writeOutput function on the processor
  */
  if (errorMessage != "")
    {
    // REMOVED in Calgary Release
    // xM does not currently handle error's in callbacks xMod 5.47
    //g_response.setHeader("Content-Type", "application/json");
    //g_response.setStatus(400);
    g_response.setHeader("Content-Type", "application/json");
    g_processor.writeOutput(errorMessage);
  } else
  {
    g_response.setHeader("Content-Type", "text/plain");
    g_processor.writeOutput("OK");
  }
} catch (e) {
  //g_response.setHeader("Content-Type", "application/json");
  //g_response.setStatus(400);
  g_processor.writeOutput(e.message);
}



// The state is actually an integer field
// and look ups are done when you view the record
function getStateValue( response ) {
  var theState;
  switch( response ) {
    case 'In Progress':
      theState = 'Work In Progress';
      break;
    case 'Closed':
      theState = 'Closed Complete';
      break;
    default:
      theState = 'Open';
  }
  
  var choice = new GlideRecord( 'sys_choice' );
  choice.addQuery( 'name',    'task' );
  choice.addQuery( 'element', 'state' );
  choice.addQuery( 'label',    theState );
  choice.query();
  choice.next();
  
  return choice.value;
}

function buildResponse( names ) {
  var obj = {};
  
  for(var i in names ) {
    //log.debug( '  buildResponse: ' + i + ': ' + names[i] );
    obj[ names[i] ] = g_request.getParameter( names[i] );  
  }
  return obj;
}
]]></script>
        <sys_class_name>sys_processor</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2015-02-09 22:29:37</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>9b9529837b42f1008e0b707d784d4d7e</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>xMattersTaskRESTProcessor</sys_name>
        <sys_package display_value="xMatters" source="x_xma_xmatters">5950d7444f2231000e9fa88ca310c78c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_processor_9b9529837b42f1008e0b707d784d4d7e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2015-09-30 21:35:04</sys_updated_on>
        <type>script</type>
    </sys_processor>
</record_update>
