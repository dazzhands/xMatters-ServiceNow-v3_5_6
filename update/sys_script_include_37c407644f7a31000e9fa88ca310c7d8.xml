<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_xma_xmatters.xMattersBackgroundBatchSync</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>xMattersBackgroundBatchSync</name>
        <script><![CDATA[/**
 * This script will attempt to load all users, devices, groups and teams into xMatters.
 */
gs.include("xMattersLogger");
gs.include("xMattersGroupSync");
gs.include("xMattersGroupMemberSync");
gs.include("xMattersDataHelper");
gs.include("xMattersPersonCollection");

var xMattersBackgroundBatchSync = Class.create();

xMattersBackgroundBatchSync.prototype = {

    type: 'xMattersBackgroundBatchSync',

    /**
     * initialize xMattersBackgroundBatchSync object
     *
     * @param logLevel to set for logging session
     */
    initialize: function (logLevel) {
        // Set to 0 or negative, to use as many processes as possible (1 process per 6-7 users)
        this.MAX_USER_PROCESSES = 10;

        // The 'Background max events, jobs, etc limits' Quota
        // only allows 100 HTTP calls per process. Geneva
        // seems to have a lower threshold.
        this.MAX_CALLS_PER_PROCESS = 50;

        // I[/you?] counted the max API calls for each of these
        this.CALLS_PER_USER = 6;
        this.CALLS_PER_GROUP = 9;

        this.appPrefix = gs.getCurrentScopeName();

        // Initialize the SOAP Helper and Logger
        // We'll use a different log level than the one in settings
        this.log = new xMattersLogger(logLevel);

        this.dataHelper = new xMattersDataHelper();

		this.personCollection = new xMattersPersonCollection(this.dataHelper);
        this.groupSync = new xMattersGroupSync();
    },

    /**
     * sync users from ServiceNow to xMatters
     */
    syncUsers: function () {
        var start = new Date();
        this.log.debug("Loading users into xMatters started: " + start);

        // Get the list of "sync'able" users
        var userList = this.personCollection.getSyncableUsers();
        var numUsers = userList.length;
        this.log.debug("User list completed: " + this.log.timer(start.getTime()) +
            " ms, " + numUsers + " users.");

        var numUserProcesses, userBucketSize;
        if (this.MAX_USER_PROCESSES > 0) {
            userBucketSize = Math.ceil(numUsers / this.MAX_USER_PROCESSES);
            numUserProcesses = this.MAX_USER_PROCESSES;
            
        } else {
            // Determine the total number of API calls that will be needed
            var numApiCalls = numUsers * this.CALLS_PER_USER;

            // Figure out how many "buckets" will be needed based on the number of API calls
            numUserProcesses = Math.ceil(numApiCalls / this.MAX_CALLS_PER_PROCESS);

            // How many API calls in each bucket?
            userBucketSize = this.MAX_CALLS_PER_PROCESS / this.CALLS_PER_USER;
        }
        this.log.debug('UserProc: ' + numUserProcesses + " userBucketSize: " + userBucketSize);
        this.log.info("Loading these users into xMatters:" + userList.join());

        // Keeping an array of these workers seems like a good idea... might be useful some day.
        var workers = [];
        for (n = 0; n < numUserProcesses; n++) {
            var slice = userList.slice(n * userBucketSize, (n + 1) * userBucketSize);
            if (slice.length > 0) {
                this.log.debug('Slice: ' + n + ': ' + slice);
                workers.push(this.personCollection.syncUsersAsync(slice)); // userSync.syncUsersAsync(slice));
            }
        }

        this.log.warn("xMatters batch user sync. " + workers.length + " workers started at " +
            new Date() + ": " + workers + ". Time elapsed: " +
            this.log.timer(start.getTime()) + " ms.");
    },

    /**
     * sync groups from ServiceNow to xMatters
     *
     * @TODO remove/replace SOAP references
     */
    syncGroups: function () {
        var start = new Date();
        this.log.debug("Loading groups into xMatters started: " + start);

        // Get the list of "sync'able" groups
        var groupList = this.dataHelper.getxMGroups();
        var numGroups = groupList.length;
        this.log.debug("Group list completed: " + this.log.timer(start.getTime()) +
            " ms, " + numGroups + " groups.");

        // Determine the total number of API calls that will be needed
        var numApiCalls = numGroups * this.CALLS_PER_GROUP;

        // Figure out how many "buckets" will be needed based on the number of API calls
        var numGroupProcesses = Math.ceil(numApiCalls / this.MAX_CALLS_PER_PROCESS);

        // How many API calls in each bucket?
        var groupBucketSize = this.MAX_CALLS_PER_PROCESS / this.CALLS_PER_GROUP;

        this.log.debug('GroupProc: ' + numGroupProcesses);
        this.log.info('Loading these groups into xMatters: ' + groupList.join());

        var workers = [];
        for (n = 0; n < numGroupProcesses; n++) {
            var slice = groupList.slice(n * groupBucketSize, (n + 1) * groupBucketSize);
            this.log.debug('Slice: ' + n + ': ' + slice);
            if (numGroupProcesses == 1) {
                this.groupSync.syncGroups(slice);
            } else {
                var worker = new GlideScriptedHierarchicalWorker();
                // This is the name of the worker in the sys_progress_worker table.
                worker.setProgressName("Group Sync Worker");

                // Instantiate the ScriptInclude and indicate which method to fire
                // The parameters are passed in order, not by name, so the first
                // value of that putMethodArg is not used.
                worker.setScriptIncludeName(this.appPrefix + '.' + "xMattersGroupSync");
                worker.setScriptIncludeMethod("syncGroups");
                worker.putMethodArg("list", slice);

                worker.setBackground(true);
                worker.start();
                workers.push(worker.getProgressID());
            }
        }
        this.log.warn("xMatters batch group sync. " + workers.length + " workers started: " +
            workers + ". Time elapsed: " + this.log.timer(start.getTime()) + " ms.");
    }
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2015-03-11 17:49:08</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>37c407644f7a31000e9fa88ca310c7d8</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>xMattersBackgroundBatchSync</sys_name>
        <sys_package display_value="xMatters" source="x_xma_xmatters">5950d7444f2231000e9fa88ca310c78c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="xMatters">5950d7444f2231000e9fa88ca310c78c</sys_scope>
        <sys_update_name>sys_script_include_37c407644f7a31000e9fa88ca310c7d8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2016-06-10 15:58:36</sys_updated_on>
    </sys_script_include>
</record_update>
